{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar display = [];\nexport default function test() {\n  var _useState = useState(display),\n      _useState2 = _slicedToArray(_useState, 2),\n      displayState = _useState2[0],\n      updateDisplay = _useState2[1];\n\n  useEffect(function () {\n    fetchTodo();\n    var subscription = DataStore.observe(Todo).subscribe(function () {\n      return fetchTodo();\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  });\n\n  function fetchTodo() {\n    var displayState;\n    return _regeneratorRuntime.async(function fetchTodo$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(DataStore.query(Todo));\n\n          case 2:\n            displayState = _context.sent;\n            updateDisplay(displayState);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  return displayState;\n}","map":{"version":3,"sources":["C:/Users/nduda/Documents/GitHub/Oxi-react/test.js"],"names":["display","test","useState","displayState","updateDisplay","useEffect","fetchTodo","subscription","DataStore","observe","Todo","subscribe","unsubscribe","query"],"mappings":";;AAAA,IAAMA,OAAO,GAAG,EAAhB;AACA,eAAe,SAASC,IAAT,GAAgB;AAE/B,kBAAsCC,QAAQ,CAACF,OAAD,CAA9C;AAAA;AAAA,MAAOG,YAAP;AAAA,MAAqBC,aAArB;;AACEC,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,SAAS;AAET,QAAMC,YAAY,GAAGC,SAAS,CAACC,OAAV,CAAkBC,IAAlB,EAAwBC,SAAxB,CAAkC;AAAA,aACvDL,SAAS,EAD8C;AAAA,KAAlC,CAArB;AAGA,WAAO;AAAA,aAAMC,YAAY,CAACK,WAAb,EAAN;AAAA,KAAP;AACD,GAPQ,CAAT;;AASA,WAAeN,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAC6BE,SAAS,CAACK,KAAV,CAAgBH,IAAhB,CAD7B;;AAAA;AACQP,YAAAA,YADR;AAEEC,YAAAA,aAAa,CAACD,YAAD,CAAb;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAOA,YAAP;AACD","sourcesContent":["const display = []\r\nexport default function test() {\r\n\r\nconst [displayState, updateDisplay] = useState(display);\r\n  useEffect(() => {\r\n    fetchTodo();\r\n\r\n    const subscription = DataStore.observe(Todo).subscribe(() => \r\n    fetchTodo()\r\n    );\r\n    return () => subscription.unsubscribe();\r\n  });\r\n\r\n  async function fetchTodo() {\r\n    const displayState = await DataStore.query(Todo)\r\n    updateDisplay(displayState);\r\n  }\r\n\r\n  return displayState\r\n}"]},"metadata":{},"sourceType":"module"}